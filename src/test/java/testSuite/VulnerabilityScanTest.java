package testSuite;

import io.qameta.allure.*;
import io.restassured.response.Response;
import org.junit.jupiter.api.*;

import static io.restassured.RestAssured.given;

public class VulnerabilityScanTest {

    String proxy="http://localhost:9090";
    Response response;
    String idScanner;
    @BeforeEach
    public void start(){}



    @Order(2)
    @Test
    @DisplayName("Verificar la generacion de escaneo de OWASP ZAP")
    @Description("Este test inicia el ZAP y genera reporte")
    @Severity(SeverityLevel.CRITICAL)
    @Owner("UCB")
    @Link(name = "WebPage", url = "google.com")
    @Issue("DEF-12345")
    @Feature("Vulnerabilidad Web")
    @Epic("Seguridad")
    @Story("Escaneo con OWASP ZAP")
    public void owaspZap() throws InterruptedException {
        initScanner();
        waitScannerComplete();
    }

    @Step("2) espera que el escaneo se complete en un 100%")
    private void waitScannerComplete() throws InterruptedException {
        // esperar para que el escaneo este al  100%
        String state= "0";
        do{
            Thread.sleep(5000);
            response = given()
                    .queryParam("scanId",idScanner)
                    .log().all()
                    .when().get(proxy+"/JSON/ascan/view/status/");

            response.then().log().all();
            state = response.then().extract().path("status");
            System.out.println("porcentaje actual : ["+state+"%]");
        } while (!state.equals("100"));
        System.out.println("llego al 100% !!!!!");
    }

    @Step("1) inicio el scaneo en todo.ly")
    private void initScanner() {
        response = given()
                           .queryParam("url","https://juice-shop.herokuapp.com/")
                           .log().all()
                   .when().get(proxy+"/JSON/ascan/action/scan/");

        response.then().log().all();
        idScanner = response.then().extract().path("scan");
    }

    @AfterEach
    public void complete(){
        response = given()
                .queryParam("scanId",idScanner)
                .log().all()
                .when().get(proxy+"/HTML/ascan/view/scanProgress/");
        response.then().log().all();
        //pending : adjuntar el reporte html en allure
        attachHTML("Lista Vulnerabilidades Realizadas (Coverage)",response.getBody().asString());

        response = given()
                   .log().all()
                .when().get(proxy+"/OTHER/core/other/htmlreport/");
        response.then().log().all();
        attachHTML("Reporte OWASP ZAP",response.getBody().asString());

        // pending : adjuntar el reporte html en allure
    }

    @Attachment(value = "{0}", type = "text/hmtl")
    public String attachHTML(String name, String content){
        return  content;
    }


}
